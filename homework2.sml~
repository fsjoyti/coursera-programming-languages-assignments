(* Dan Grossman, Coursera PL, HW2 Provided Code *)

(* if you use this function to compare two strings (returns true if the same
   string), then you avoid several of the functions in problem 1 having
   polymorphic types that may be confusing *)
fun same_string(s1 : string, s2 : string) =
    s1 = s2

(* put your solutions for problem 1 here *)
fun all_except_option(str,string_list)=
    let
	fun remove_string_from_list(string_to_remove,str_list)=
	    case str_list of [] => []
			    |head::str_list'=> if (same_string(head,string_to_remove))
					       then str_list'
					       else head::remove_string_from_list(string_to_remove,str_list')
    val filtered_list=remove_string_from_list(str,string_list)
    in
	if string_list = filtered_list
	then NONE
	else SOME filtered_list
    end

fun get_substitutions1(strings_list,s)=
    case strings_list of [] => []
		       |head::strings_list'=>
			case all_except_option(s,head) of
			     NONE => get_substitutions1(strings_list',s)
			   | SOME list_returned => list_returned @ get_substitutions1(strings_list',s);

fun get_substitutions2(strings_list,str)=
    let fun helper_substitution(xs,acc)=
	    case xs  of
		[] => acc
	      | x :: xs' => case all_except_option(str,x)  of
				     NONE => helper_substitution(xs',acc)
				  |  SOME list_returned=>helper_substitution(xs',acc@list_returned)
    in
	helper_substitution(strings_list,[])
    end

fun similar_names(strings_list,{first=firstName,middle=middleName,last=lastName})=
    let
	val substitutions = get_substitutions2(strings_list,firstName)
    in
	let
	    fun create_names_list(subList)=
		case subList of
		    []=> []
		  | head::subList' => {first=head,middle=middleName,last=lastName}::create_names_list(subList')
	in
	{first=firstName,middle=middleName,last=lastName}:: create_names_list(substitutions)
	end
     end
					     
	
(* you may assume that Num is always used with values 2, 3, ..., 10
   though it will not really come up *)
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Jack | Queen | King | Ace | Num of int 
type card = suit * rank

datatype color = Red | Black
datatype move = Discard of card | Draw 

exception IllegalMove

(* put your solutions for problem 2 here *)
